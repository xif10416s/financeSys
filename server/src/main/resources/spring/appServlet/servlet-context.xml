<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:security="http://www.springframework.org/schema/security"
             xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<!--<resources mapping="/resources/**" location="/resources/" />-->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	
	<!-- use thymeleaf  -->  
    <beans:bean id="templateResolver"  class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
        <beans:property name="prefix" value="/" />
        <beans:property name="suffix" value=".jsp" />
        <beans:property name="templateMode" value="HTML5" />
        <!-- Template cache is set to false (default is true).        -->
        <beans:property name="cacheable" value="false" />
        <beans:property name="characterEncoding" value="UTF-8"/>
    </beans:bean>

    <beans:bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
        <beans:property name="templateResolver" ref="templateResolver" />
    </beans:bean>

    <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <beans:property name="maxUploadSize" value="16777216"/>
    </beans:bean>

    <!--  
    - The ContentNegotiatingViewResolver delegates to the InternalResourceViewResolver and BeanNameViewResolver,  
    - and uses the requested media type (determined by the path extension) to pick a matching view.   
    - When the media type is 'text/html', it will delegate to the InternalResourceViewResolver's JstlView,   
    - otherwise to the BeanNameViewResolver.  
    -->  
    <beans:bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">  
        <beans:property name="contentNegotiationManager" ref="cnManager"/>  

        <beans:property name="viewResolvers">  
            <beans:list>  

                <!-- Used here for 'xml' and 'atom' views  -->  
                <beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">  
                    <beans:property name="order" value="1"/>  
                </beans:bean>  

                <beans:bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">  
                    <beans:property name="templateEngine" ref="templateEngine" />  
                    <beans:property name="characterEncoding" value="UTF-8"/>  
                    <beans:property name="order" value="2"/>  
                    <!-- We need to set exclusions because Content Negotiation tries to resolve from -->  
                    <!-- Thymeleaf even if a specific view bean (of a different class) is already    -->  
                    <!-- found, which might cause exceptions (e.g. ThymeleafView does not have a     -->  
                    <!-- 'marshaller' property).                                                     -->  
                    <beans:property name="excludedViewNames" value="*.xml" />  
                </beans:bean>
            </beans:list>  
        </beans:property>  
    </beans:bean>  

    <!-- Simple strategy: only path extension is taken into account -->  
    <beans:bean id="cnManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">  
        <beans:property name="favorPathExtension" value="true"/>  
        <beans:property name="ignoreAcceptHeader" value="true"/>  
        <beans:property name="defaultContentType" value="text/html"/>  

        <beans:property name="mediaTypes">  
            <beans:map>  
                <beans:entry key="html" value="text/html" />  
                <beans:entry key="xml" value="application/xml" />  
                <beans:entry key="atom" value="application/atom+xml" />  
            </beans:map>  
        </beans:property>  
    </beans:bean>
	
	<!-- interceptors -->
<!-- 	<interceptors> -->
<!-- 		<interceptor> -->
<!-- 			<mapping path="/**" /> -->
<!-- 			<exclude-mapping path="/" /> -->
<!-- 			<exclude-mapping path="/auth/login" /> -->
<!-- 			<beans:bean class="com.hq.advertiser.web.interceptor.XSRFInterceptor" /> -->
<!-- 		</interceptor> -->
<!-- 	</interceptors> -->

	<context:component-scan base-package="org.fxi" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

	<beans:bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<beans:property name="locations">
			<beans:list>
				<beans:value>classpath:spring-data.properties</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!--<security:global-method-security pre-post-annotations="enabled" secured-annotations="enabled"></security:global-method-security>-->
</beans:beans>
